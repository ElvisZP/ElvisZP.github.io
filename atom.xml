<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ElvisZP</title>
  <subtitle>记录成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://elviszp.github.io/"/>
  <updated>2016-11-28T17:00:06.000Z</updated>
  <id>https://elviszp.github.io/</id>
  
  <author>
    <name>zhang peng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ELProgressView备忘</title>
    <link href="https://elviszp.github.io/2016/11/26/2016-11-28%20ELProgressView%E5%A4%87%E5%BF%98/"/>
    <id>https://elviszp.github.io/2016/11/26/2016-11-28 ELProgressView备忘/</id>
    <published>2016-11-26T03:31:01.000Z</published>
    <updated>2016-11-28T17:00:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前有做一个需要圆形进度条的项目，现在提交到Github上去了：<a href="https://github.com/ElvisZP/ELCircleProgressView" target="_blank" rel="external">https://github.com/ElvisZP/ELCircleProgressView</a> 。<br>总结一下里面用到的知识点，没什么难度，仅当做备忘。另外后续会添加Cocoapod、Carthage支持。</p>
<h3 id="CALayer"><a href="#CALayer" class="headerlink" title="CALayer"></a>CALayer</h3><p>CALayer和UIView的关系</p>
<blockquote>
<p>每一个UIView都有一个CALayer实例的图层属性，UIView的职责就是创建并管理这个CALayer。实际上，CALayer才是真正用来在屏幕上显示以及做动画，UIView仅仅是对它的一个封装。UIView处理事件。这样做，为了职责分离。<br><a id="more"></a></p>
</blockquote>
<p>我们对视图大部分的操作都能通过UIView暴露出来的API来实现，不过有一些高级特性需要直接使用CALayer提供的方法：圆角、阴影、边框操作等。<br>CALayer有一个delegate属性，实现了CALayerDelegate协议，当UIView创建它时，它会自动把图层delegate指向UIView。</p>
<p>当我们单独使用CALayer时，如果需要响应触摸事件，一般使用-hitTest:方法即可。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span> *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line">    <span class="comment">//get touch position</span></div><div class="line">    <span class="built_in">CGPoint</span> point = [[touches anyObject] locationInView:<span class="keyword">self</span>.view];</div><div class="line">    <span class="comment">//get touched layer</span></div><div class="line">    <span class="built_in">CALayer</span> *layer = [<span class="keyword">self</span>.layerView.layer hitTest:point];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CAShapeLayer"><a href="#CAShapeLayer" class="headerlink" title="CAShapeLayer"></a>CAShapeLayer</h3><p>CAShapeLayer是CALayer的子类，但是它比CALayer更加灵活，可以画出各种图形。与使用Core Graphics画图相比，CAShapeLayer有以下优点：</p>
<ul>
<li>渲染快速，CAShapeLayer使用了硬件加速。</li>
<li>高效使用内存。</li>
<li>不会被辩解裁剪。</li>
</ul>
<p>使用方法：</p>
<ol>
<li>创建图层</li>
<li>设置属性、添加path</li>
<li>添加到目标图层里<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CAShapeLayer</span> *circleLayer = [[<span class="built_in">CAShapeLayer</span> alloc] init];</div><div class="line">circleLayer.strokeEnd = <span class="number">0</span>;</div><div class="line">circleLayer.strokeStart = <span class="number">0</span>;</div><div class="line">circleLayer.fillColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">circleLayer.lineCap = kCALineCapRound;</div><div class="line">circleLayer.lineJoin = kCALineJoinRound;</div><div class="line">circleLayer.borderColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line"></div><div class="line"><span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:<span class="built_in">CGPointMake</span>(width/<span class="number">2</span>, height/<span class="number">2</span>) radius:width/<span class="number">2</span> startAngle:<span class="keyword">self</span>.startAngle endAngle:<span class="keyword">self</span>.endAngle clockwise:<span class="literal">true</span>];</div><div class="line">circleLayer.frame = <span class="keyword">self</span>.view.bounds;</div><div class="line">circleLayer.strokeColor = <span class="keyword">self</span>.foreStrokeColor.CGColor;</div><div class="line">circleLayer.path = [<span class="keyword">self</span> shapeLayerPath].CGPath;</div><div class="line">circleLayer.lineWidth = <span class="keyword">self</span>.lineWidth;</div><div class="line"></div><div class="line">[<span class="keyword">self</span>.view.layer addSublayer: circleLayer];</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="NSTimer"><a href="#NSTimer" class="headerlink" title="NSTimer"></a>NSTimer</h3><p>使用方法：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建并添加到runloop中</span></div><div class="line">timer = [NSTimer <span class="string">scheduledTimerWithTimeInterval:</span><span class="number">1</span> <span class="string">target:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(ticker) <span class="string">userInfo:</span>nil <span class="string">repeats:</span>NO]; </div><div class="line"></div><div class="line"><span class="comment">//只创建，需要自己手动添加到指定runloop中工作</span></div><div class="line">_timer = [NSTimer <span class="string">timerWithTimeInterval:</span><span class="number">0.1</span> <span class="string">target:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(changeProgress) <span class="string">userInfo:</span>nil <span class="string">repeats:</span><span class="literal">true</span>];</div><div class="line">        [[NSRunLoop currentRunLoop] <span class="string">addTimer:</span>_timer <span class="string">forMode:</span>NSRunLoopCommonModes];</div></pre></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li>内存泄漏</li>
</ul>
<blockquote>
<p>timer会强引用传入的对象，所以一定不要在dealloc方法中调用结束方法，我一般是在viewDidDisappear中销毁对象</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)<span class="string">viewDidAppear:</span>(BOOL)animated&#123;</div><div class="line">    [<span class="keyword">super</span> <span class="string">viewDidAppear:</span>animated];</div><div class="line">    <span class="keyword">if</span>(_timer == nil)&#123;</div><div class="line">        _timer = [NSTimer <span class="string">scheduledTimerWithTimeInterval:</span><span class="number">2</span> <span class="string">target:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(changeProgress) <span class="string">userInfo:</span>nil <span class="string">repeats:</span><span class="literal">true</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">-(<span class="keyword">void</span>)<span class="string">viewDidDisappear:</span>(BOOL)animated&#123;</div><div class="line">    [<span class="keyword">super</span> <span class="string">viewDidDisappear:</span>animated];</div><div class="line">    <span class="keyword">if</span>(_timer != nil)&#123;</div><div class="line">        [_timer invalidate];</div><div class="line">        _timer = nil;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Runloop</li>
</ul>
<blockquote>
<p>NSTimer需要添加到runloop中才能运行。另外NSTimer默认是加入到NSDefaultRunLoopMode下的，所以在UITableView(UIScrollView)滑动时，NSTimer也是不工作的。如果需要滑动状态下也继续工作，就需要手动添加。</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)<span class="string">viewDidAppear:</span>(BOOL)animated&#123;</div><div class="line">    [<span class="keyword">super</span> <span class="string">viewDidAppear:</span>animated];</div><div class="line">    <span class="keyword">if</span>(_timer == nil)&#123;</div><div class="line">        _timer = [NSTimer <span class="string">timerWithTimeInterval:</span><span class="number">0.1</span> <span class="string">target:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(changeProgress) <span class="string">userInfo:</span>nil <span class="string">repeats:</span><span class="literal">true</span>];</div><div class="line">        [[NSRunLoop currentRunLoop] <span class="string">addTimer:</span>_timer <span class="string">forMode:</span>NSRunLoopCommonModes];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="layoutSubviews"><a href="#layoutSubviews" class="headerlink" title="layoutSubviews"></a>layoutSubviews</h3><p>调用场景：</p>
<ol>
<li>addSubview</li>
<li>设置frame(值发生了变化)</li>
<li>滚动UIScrollView</li>
<li>旋转Screen会触发父UIView上的layoutSubviews</li>
<li>改变一个UIView的大小，也会触发父UIView的layoutSubViews</li>
<li>直接调用setLayoutSubviews</li>
</ol>
<p>如果要立即刷新，那么先调用view.setNeedsLayout()标记，然后调用view.layoutIfNeeded()</p>
<hr>
<p>参考：</p>
<ul>
<li><a href="https://book.douban.com/subject/25716177/" target="_blank" rel="external">iOS Core Animation: Advanced Techniques</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前有做一个需要圆形进度条的项目，现在提交到Github上去了：&lt;a href=&quot;https://github.com/ElvisZP/ELCircleProgressView&quot;&gt;https://github.com/ElvisZP/ELCircleProgressView&lt;/a&gt; 。&lt;br&gt;总结一下里面用到的知识点，没什么难度，仅当做备忘。另外后续会添加Cocoapod、Carthage支持。&lt;/p&gt;
&lt;h3 id=&quot;CALayer&quot;&gt;&lt;a href=&quot;#CALayer&quot; class=&quot;headerlink&quot; title=&quot;CALayer&quot;&gt;&lt;/a&gt;CALayer&lt;/h3&gt;&lt;p&gt;CALayer和UIView的关系&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个UIView都有一个CALayer实例的图层属性，UIView的职责就是创建并管理这个CALayer。实际上，CALayer才是真正用来在屏幕上显示以及做动画，UIView仅仅是对它的一个封装。UIView处理事件。这样做，为了职责分离。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://elviszp.github.io/tags/iOS/"/>
    
      <category term="ELProgressView" scheme="https://elviszp.github.io/tags/ELProgressView/"/>
    
      <category term="CALayer" scheme="https://elviszp.github.io/tags/CALayer/"/>
    
      <category term="NSTimer" scheme="https://elviszp.github.io/tags/NSTimer/"/>
    
      <category term="layoutSubviews" scheme="https://elviszp.github.io/tags/layoutSubviews/"/>
    
  </entry>
  
  <entry>
    <title>浅谈GCD</title>
    <link href="https://elviszp.github.io/2016/11/26/2016-11-26%20%E6%B5%85%E8%B0%88GCD/"/>
    <id>https://elviszp.github.io/2016/11/26/2016-11-26 浅谈GCD/</id>
    <published>2016-11-26T03:31:01.000Z</published>
    <updated>2016-11-26T16:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在iOS上使用多线程的方式有NSTread、NSOperationQueue、GCD，平时使用最多的就是GCD，使用起来也是最方便的，它提供了非常简洁的API来使用繁杂的多线程编程。<br>多线程的使用也会造成很多问题，比如数据竞争、死锁、线程过多导致内存过大以及切换线程影响性能。所以，在使用多线程编程的时候需要特别注意这些问题。<br>不过GCD是有系统来调度线程，所以它的效率会更好一些。</p>
<p>我们先来了解这几个概念：</p>
<p><strong>Dispatch Queue</strong><br>它是一个任务的操作队列，如果你要执行一个任务，那么就将它添加到一个适当的dispatch queue中。<br>dispatch queue有两种操作模式，并行与串行。每个程序系统自动提供了两种默认的queue，一种是串行的main queue(运行在主线程)，一种是并行的global queue，系统提供了获取方法。<br>除此之外，系统也提供了api来创建不同的dispatch queue。<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取默认的main queue</span></div><div class="line"><span class="keyword">dispatch_queue_t</span> mainQueue = dispatch_get_main_queue();</div><div class="line"><span class="comment">/*</span></div><div class="line">*  获取默认的并行线程global queue，第一个参数传递优先级</div><div class="line">*  DISPATCH_QUEUE_PRIORITY_HIGH</div><div class="line">*  DISPATCH_QUEUE_PRIORITY_DEFAULT</div><div class="line">*  DISPATCH_QUEUE_PRIORITY_LOW</div><div class="line">*  DISPATCH_QUEUE_PRIORITY_BACKGROUND</div><div class="line">*/</div><div class="line"><span class="keyword">dispatch_queue_t</span> globalQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">*  自定义dispatch queue</div><div class="line">*  第一个参数： 队列名称</div><div class="line">*  第二个参数： NULL或者DISPATCH_QUEUE_SERIAL代表创建串行队列， DISPATCH_QUEUE_CONSURRENT代表创建并行队列</div><div class="line">*/</div><div class="line"><span class="keyword">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"com.xx.serial"</span>,<span class="literal">NULL</span>);</div><div class="line"><span class="keyword">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.xx.concurrent"</span>,DISPATCH_QUEUE_CONCURRENT);</div></pre></td></tr></table></figure></p>
<p>现在已经有了dispatch queue，那么就可以来执行任务了。</p>
<p><strong>dispatch_async dispatch_sync</strong><br>dispatch_async: 异步调度任务。<br>dispatch_sync: 同步调度任务，等待队列里面的操作完成之后，再继续执行。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;= <span class="number">10</span>; i++)&#123;</div><div class="line">	<span class="built_in">dispatch_async</span>(concurrentQueue, ^&#123;</div><div class="line">       <span class="built_in">NSLog</span>(<span class="string">@"%d____%@"</span>, i, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">   &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是运行结果</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338832</span>] <span class="number">1</span>____&lt;NSThread: <span class="number">0</span>x60800007ab40&gt;&#123;number = <span class="number">4</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338844</span>] <span class="number">0</span>____&lt;NSThread: <span class="number">0</span>x600<span class="number">00007c8c0</span>&gt;&#123;number = <span class="number">3</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338829</span>] <span class="number">2</span>____&lt;NSThread: <span class="number">0</span>x60000007ca80&gt;&#123;number = <span class="number">5</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338832</span>] <span class="number">4</span>____&lt;NSThread: <span class="number">0</span>x60800007ab40&gt;&#123;number = <span class="number">4</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338855</span>] <span class="number">3</span>____&lt;NSThread: <span class="number">0</span>x608<span class="number">00007b040</span>&gt;&#123;number = <span class="number">6</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338844</span>] <span class="number">6</span>____&lt;NSThread: <span class="number">0</span>x600<span class="number">00007c8c0</span>&gt;&#123;number = <span class="number">3</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338856</span>] <span class="number">5</span>____&lt;NSThread: <span class="number">0</span>x60000007cb80&gt;&#123;number = <span class="number">7</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.253</span> Test<span class="number">2[15610</span>:<span class="number">1338829</span>] <span class="number">7</span>____&lt;NSThread: <span class="number">0</span>x60000007ca80&gt;&#123;number = <span class="number">5</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.253</span> Test<span class="number">2[15610</span>:<span class="number">1338832</span>] <span class="number">8</span>____&lt;NSThread: <span class="number">0</span>x60800007ab40&gt;&#123;number = <span class="number">4</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.253</span> Test<span class="number">2[15610</span>:<span class="number">1338855</span>] <span class="number">9</span>____&lt;NSThread: <span class="number">0</span>x608<span class="number">00007b040</span>&gt;&#123;number = <span class="number">6</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.253</span> Test<span class="number">2[15610</span>:<span class="number">1338857</span>] <span class="number">10</span>____&lt;NSThread: <span class="number">0</span>x60800007ac00&gt;&#123;number = <span class="number">8</span>, name = (null)&#125;</div></pre></td></tr></table></figure>
<p>能看出，由于使用的是并行队列，所以执行是无序的，另外系统自动分配了，在不同的线程中执行。</p>
<p><strong>dispatch_after</strong><br>有时候会有需求，在几秒钟之后执行某个任务，那么使用dispatch_after是再好不过了。<br>dispatch_after，在指定的时间，添加任务处理到dispatch_queue中去执行。这里要注意的是，并非延时运行，而是延时添加。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 具体时间</span></div><div class="line"><span class="comment">//2. 制定要追加处理的Dispatch Queue</span></div><div class="line"><span class="comment">//3. 需要执行的block</span></div><div class="line">dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW, <span class="number">3</span>ull * <span class="built_in">NSEC_PER_SEC</span>);</div><div class="line">dispatch_after(time, dispatch_get_main_queue(), ^&#123;</div><div class="line">   <span class="built_in">NSLog</span>(<span class="string">@""</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>dispatch_set_target_queue</strong><br>如果建立一个queue之后，想要更改它的优先级，就使用dispatch_set_target_queue。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果有多个serial Queue，设置优先级，可改变并行执行。</span></div><div class="line"><span class="keyword">dispatch_queue_t</span> mySerialQueue = dispatch_queue_create(<span class="string">"mySerialQueue"</span>, <span class="literal">NULL</span>);</div><div class="line"><span class="keyword">dispatch_queue_t</span> globalDispatchQueueBackground = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND,<span class="number">0</span>);</div><div class="line">dispatch_set_target_queue(mySerialQueue, globalDispatchQueueBackground);</div></pre></td></tr></table></figure>
<p><strong>dispatch_group</strong><br>同步多任务的一种方式，另外一种方式semaphone。<br>将任务添加到任务组中，然后监听任务组事件执行完毕。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t queue = dispatch_get_global_queue(<span class="name">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)<span class="comment">;</span></div><div class="line">dispatch_group_t group = dispatch_group_create()<span class="comment">;</span></div><div class="line">    </div><div class="line">dispatch_group_async(<span class="name">group</span>, queue, ^&#123;NSLog(@<span class="string">"1"</span>)<span class="comment">;&#125;);</span></div><div class="line">dispatch_group_async(<span class="name">group</span>, queue, ^&#123;NSLog(@<span class="string">"2"</span>)<span class="comment">;&#125;);</span></div><div class="line">dispatch_group_async(<span class="name">group</span>, queue, ^&#123;NSLog(@<span class="string">"3"</span>)<span class="comment">;&#125;);</span></div><div class="line">//为group添加过时时间</div><div class="line">dispatch_group_wait(<span class="name">group</span>, DISPATCH_TIME_FOREVER)<span class="comment">;</span></div><div class="line">//添加订阅，group中的任务都完成之后，会调用此block</div><div class="line">dispatch_group_notify(<span class="name">group</span>, dispatch_get_main_queue(), ^&#123;</div><div class="line">   NSLog(@<span class="string">"done"</span>)<span class="comment">;</span></div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p><strong>dispatch_barrier_async</strong><br>之前说过，多线程会导致数据竞争，dispatch_barrier_async能够解决这个问题。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是一系列读写操作。</span></div><div class="line"><span class="comment">//读取操作可以同时进行，不会对数据有影响，而写入操作需要单独运行。否则在写入的同时进行读取操作，那么很有可能会造成数据错误。所以在进行写入操作的时候，需要停止其他的操作。</span></div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk0_for_reading);</div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk1_for_reading);</div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk2_for_reading);</div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk3_for_reading);</div><div class="line"></div><div class="line"><span class="comment">//barrier_async会阻断前后线程的执行，避免数据竞争</span></div><div class="line">dispatch_barrier_async(<span class="built_in">queue</span>, blk_for_writing);</div><div class="line"></div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk4_for_reading);</div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk5_for_reading);</div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk6_for_reading);</div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk7_for_reading);</div></pre></td></tr></table></figure>
<p><strong>dispatch_semaphore</strong><br>我们可以通过信号量来控制并发，semaphore有3个操作：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>dispatch_semaphore_create</td>
<td>创建一个semaphore</td>
</tr>
<tr>
<td>dispatch_semaphore_signal</td>
<td>发送一个信号</td>
</tr>
<tr>
<td>dispatch_semaphore_wait</td>
<td>等待信号</td>
</tr>
</tbody>
</table>
<ul>
<li>控制并发数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dispatch_group_t</span> group = dispatch_group_create();</div><div class="line"><span class="comment">//创建一个semaphore，dispatch_semaphore_create(long value)， 传入参数代表默认信号量总数。</span></div><div class="line"><span class="keyword">dispatch_semaphore_t</span> semaphore = dispatch_semaphore_create(<span class="number">10</span>);</div><div class="line"><span class="keyword">dispatch_queue_t</span> <span class="built_in">queue</span> = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</div><div class="line">&#123;</div><div class="line">   <span class="comment">//dispatch_semaphore_wait，</span></div><div class="line">   <span class="comment">//if semaphore &lt;= 0，等待，直到semaphore &gt; 0。</span></div><div class="line">   <span class="comment">//else 执行后续操作，同时semaphore-1</span></div><div class="line">   <span class="comment">//第二个参数，传入等待时间。</span></div><div class="line">   dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">   dispatch_group_async(group, <span class="built_in">queue</span>, ^&#123;</div><div class="line">       NSLog(@<span class="string">"%i"</span>,i);</div><div class="line">       sleep(<span class="number">2</span>);</div><div class="line">       <span class="comment">//发送信号，semaphore+1</span></div><div class="line">       dispatch_semaphore_signal(semaphore);</div><div class="line">   &#125;);</div><div class="line">&#125;</div><div class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div></pre></td></tr></table></figure>
<ul>
<li>加锁</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">NSURLSessionDelegate</span>&gt;</span>&#123;</div><div class="line">    dispatch_semaphore_t _lock;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)doSomething&#123;</div><div class="line">    dispatch_semaphore_wait(_lock, DISPATCH_TIME_FOREVER);</div><div class="line">    <span class="comment">// doSomething</span></div><div class="line">    dispatch_semaphore_signal(_lock);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    _lock = dispatch_semaphore_create(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>异步转同步</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在AFNetworking3.0 源码中，通过session获取task一个异步操作。</span></div><div class="line"><span class="comment">//通过semaphore来确保异步操作获取成功之后，再执行后续操作。</span></div><div class="line">- (<span class="built_in">NSArray</span> *)tasksForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</div><div class="line">    __block <span class="built_in">NSArray</span> *tasks = <span class="literal">nil</span>;</div><div class="line">    <span class="comment">//创建semaphore，并设置信号量为0.</span></div><div class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line">    [<span class="keyword">self</span>.session getTasksWithCompletionHandler:^(<span class="built_in">NSArray</span> *dataTasks, <span class="built_in">NSArray</span> *uploadTasks, <span class="built_in">NSArray</span> *downloadTasks) &#123;</div><div class="line">        <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(dataTasks))]) &#123;</div><div class="line">            tasks = dataTasks;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(uploadTasks))]) &#123;</div><div class="line">            tasks = uploadTasks;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(downloadTasks))]) &#123;</div><div class="line">            tasks = downloadTasks;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(tasks))]) &#123;</div><div class="line">            tasks = [@[dataTasks, uploadTasks, downloadTasks] valueForKeyPath:<span class="string">@"@unionOfArrays.self"</span>];</div><div class="line">        &#125;</div><div class="line">		<span class="comment">//发送信号，此时，外面等待的操作才得以继续进行。</span></div><div class="line">        dispatch_semaphore_signal(semaphore);</div><div class="line">    &#125;];</div><div class="line">	<span class="comment">//此时，由于semaphore为0，线程就会等待。知道异步操作里面执行了dispatch_semaphore_signal</span></div><div class="line">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">    <span class="keyword">return</span> tasks;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>dispatch_once</strong><br>这个是我们很熟悉的，一般用于创建单例。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype)sharedInstance</span></div><div class="line">&#123;</div><div class="line">	static <span class="keyword">dispatch_once_t </span>once<span class="comment">;</span></div><div class="line">	static id <span class="keyword">sharedInstance;</span></div><div class="line">	<span class="keyword">dispatch_once(&amp;once, </span>^&#123;</div><div class="line">		<span class="keyword">sharedInstance </span>= [[self alloc] init]<span class="comment">;</span></div><div class="line">	&#125;)<span class="comment">;</span></div><div class="line">	return <span class="keyword">sharedInstance;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在iOS上使用多线程的方式有NSTread、NSOperationQueue、GCD，平时使用最多的就是GCD，使用起来也是最方便的，它提供了非常简洁的API来使用繁杂的多线程编程。&lt;br&gt;多线程的使用也会造成很多问题，比如数据竞争、死锁、线程过多导致内存过大以及切换线程影响性能。所以，在使用多线程编程的时候需要特别注意这些问题。&lt;br&gt;不过GCD是有系统来调度线程，所以它的效率会更好一些。&lt;/p&gt;
&lt;p&gt;我们先来了解这几个概念：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dispatch Queue&lt;/strong&gt;&lt;br&gt;它是一个任务的操作队列，如果你要执行一个任务，那么就将它添加到一个适当的dispatch queue中。&lt;br&gt;dispatch queue有两种操作模式，并行与串行。每个程序系统自动提供了两种默认的queue，一种是串行的main queue(运行在主线程)，一种是并行的global queue，系统提供了获取方法。&lt;br&gt;除此之外，系统也提供了api来创建不同的dispatch queue。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://elviszp.github.io/tags/iOS/"/>
    
      <category term="GCD" scheme="https://elviszp.github.io/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>Runtime 具体使用场景</title>
    <link href="https://elviszp.github.io/2016/11/24/2016-11-24/"/>
    <id>https://elviszp.github.io/2016/11/24/2016-11-24/</id>
    <published>2016-11-24T03:31:01.000Z</published>
    <updated>2016-11-26T16:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>我这里就不说原理了，目前网络上有很多对原理介绍特别深入的博客。我这里就总结下我实际开发当中应用到的实际场景。</p>
<h3 id="1-Method-Swizzling"><a href="#1-Method-Swizzling" class="headerlink" title="1. Method Swizzling"></a>1. Method Swizzling</h3><p>在实际应用中，会有需要统计实际应用路径的需求，一般都会在所有页面的viewDidAppear和viewDidDisappear事件中添加统计。<br>那么这种情况下，每个页面都去添加肯定是最低效的做法，这个时候，Runtime的功能就能发挥出来了。<br>通过+load和Method Swizzling即可实现，添加Category，添加如下代码：<br><a id="more"></a><br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UIViewController+Statistics.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">Statistics</span>)</span></div><div class="line">+ (<span class="keyword">void</span>)load</div><div class="line">&#123;</div><div class="line">    method_exchangeImplementations(class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewDidAppear:)), class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(el_viewDidAppear:)));</div><div class="line">    method_exchangeImplementations(class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewDidDisappear:)), class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(el_viewDidDisappear:)));</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)el_viewDidAppear:(<span class="built_in">BOOL</span>)animated</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> el_viewDidAppear:animated];</div><div class="line">    <span class="comment">// 在这里添加进入页面统计代码</span></div><div class="line">    <span class="comment">// 友盟example: [MobClick beginLogPageView:NSStringFromClass([self class])];</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)el_viewDidDisappear:(<span class="built_in">BOOL</span>)animated</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> el_viewDidDisappear:animated];</div><div class="line">    <span class="comment">// 在这里添加离开页面统计代码</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h3 id="Associated-Objects"><a href="#Associated-Objects" class="headerlink" title="Associated Objects"></a>Associated Objects</h3><p>关联对象，作用一般是为现有的类添加实例变量。<br>在一些优秀的第三方框架里会经常使用到他，比如MJRefresh、SDWebImageView。<br>Runtime提供的相关api是：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_setAssociatedObject</span>(<span class="params">id <span class="keyword">object</span>, <span class="keyword">const</span> <span class="keyword">void</span> *key, id <span class="keyword">value</span>, objc_AssociationPolicy policy</span>)</span>;</div><div class="line"><span class="function">id <span class="title">objc_getAssociatedObject</span>(<span class="params">id <span class="keyword">object</span>, <span class="keyword">const</span> <span class="keyword">void</span> *key</span>)</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_removeAssociatedObjects</span>(<span class="params">id <span class="keyword">object</span></span>)</span>;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIImageView</span> (<span class="title">AssociatedObjects</span>)</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *imageUrl;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">/// ----------------------</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"UIImageView+AssociatedObjects.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> imageURLKey;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImageView</span> (<span class="title">AssociatedObjects</span>)</span></div><div class="line"></div><div class="line">-(<span class="built_in">NSString</span> *)imageUrl&#123;</div><div class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;imageURLKey);</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)setImageUrl:(<span class="built_in">NSString</span> *)imageUrl&#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;imageURLKey, imageUrl, OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>可参考源代码：<a href="https://github.com/ElvisZP/Runtime-in-action" target="_blank" rel="external">Runtime in action</a></p>
<hr>
<p>未完待续</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我这里就不说原理了，目前网络上有很多对原理介绍特别深入的博客。我这里就总结下我实际开发当中应用到的实际场景。&lt;/p&gt;
&lt;h3 id=&quot;1-Method-Swizzling&quot;&gt;&lt;a href=&quot;#1-Method-Swizzling&quot; class=&quot;headerlink&quot; title=&quot;1. Method Swizzling&quot;&gt;&lt;/a&gt;1. Method Swizzling&lt;/h3&gt;&lt;p&gt;在实际应用中，会有需要统计实际应用路径的需求，一般都会在所有页面的viewDidAppear和viewDidDisappear事件中添加统计。&lt;br&gt;那么这种情况下，每个页面都去添加肯定是最低效的做法，这个时候，Runtime的功能就能发挥出来了。&lt;br&gt;通过+load和Method Swizzling即可实现，添加Category，添加如下代码：&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://elviszp.github.io/tags/iOS/"/>
    
      <category term="Runtime" scheme="https://elviszp.github.io/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Autolayout Tips</title>
    <link href="https://elviszp.github.io/2016/11/23/2016-11-24%20Autolayout%20Tips/"/>
    <id>https://elviszp.github.io/2016/11/23/2016-11-24 Autolayout Tips/</id>
    <published>2016-11-23T15:00:01.000Z</published>
    <updated>2016-11-26T16:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近Xib+Autolayout用的比较多，也学习到不少内容，在这里总结出来。</p>
<h3 id="Label布局"><a href="#Label布局" class="headerlink" title="Label布局"></a>Label布局</h3><p>一般情况下，只需设置其左边距、上边距约束即可。<a id="more"></a><br><img src="/images/14799173962097.jpg" alt="-w400"></p>
<p>我们知道，一般UIView布局，如果仅设置其左边距、上边距约束，那么Xcode就会报错，需要你加上宽高约束。那么为什么UILabel却不会报错呢？原因在于Label是自带内容的View，只要你设置了文本，那么它就能根据内容，自动计算出大小。同理，UIButton也是一样的。<br>另外还有一种特殊情况，就是你需要多行展示文本的时候，这种情况下你就必须设置其宽度或者其右边距，同时将Lines属性设为0，否则它们不知道在什么宽度的情况下换行。如图：<br><img src="/images/14799182141013.jpg" alt="-w400"></p>
<h3 id="⌘-快捷键"><a href="#⌘-快捷键" class="headerlink" title="⌘ + = 快捷键"></a>⌘ + = 快捷键</h3><p>Command键加=，能够自动将View设为与内容相适应的大小。<br><img src="/images/14799189164759.jpg" alt="-w300"><br>文字有部分未显示出来，此时按下快捷键，快速适应大小。<br>最方便的还是在添加UIImageView的时候，一般你拖出一张图片到xib上是这样的：<br><img src="/images/14799190296407.jpg" alt="-w300"><br>默认就是这样大小，如果此时你有一个小小的icon要加上去，那么效果是这样的：<br><img src="/images/14799191933631.jpg" alt="-w300"><br>一般情况下，你需要的是将UIImageView改为原图大小，那么现在最方便的就是按下快捷键：<br><img src="/images/14799192727895.jpg" alt="-w300"></p>
<h3 id="合并View"><a href="#合并View" class="headerlink" title="合并View"></a>合并View</h3><p>有时会有这样的情况，需要将页面中几个View合并到同一个SuperView中，简单的方式就是：</p>
<ol>
<li>选中需要的view</li>
<li>点击工具栏中的Editor -&gt; Embed in -&gt; View<br>另外ScrollView、StackView也可同样操作。</li>
</ol>
<h3 id="自定义Xib-TableViewCell"><a href="#自定义Xib-TableViewCell" class="headerlink" title="自定义Xib TableViewCell"></a>自定义Xib TableViewCell</h3><p>创建cell，勾选Also create XIB file。<br><img src="/images/14799555492340.jpg" alt=""><br>设置Identifier与文件同名。<br>然后添加Categary,添加一个类方法:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UITableViewCell+XibCell.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UITableViewCell</span> (<span class="title">XibCell</span>)</span></div><div class="line">+ (<span class="keyword">id</span>)cell:(<span class="built_in">UITableView</span> *)tableView&#123;</div><div class="line">    <span class="built_in">NSString</span> *identifier = <span class="built_in">NSStringFromClass</span>(<span class="keyword">self</span>);</div><div class="line">    <span class="built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:identifier];</div><div class="line">    <span class="keyword">if</span>(cell == <span class="literal">nil</span>)&#123;</div><div class="line">        cell = [[<span class="built_in">NSBundle</span> mainBundle]loadNibNamed:identifier owner:<span class="literal">nil</span> options:<span class="literal">nil</span>].firstObject;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>完工。<br>之后所有的自定义 xib cell都可以直接调用:</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomCell * cell = [CustomCell cell:<span class="literal">self</span>.<span class="built_in">table</span>View];</div></pre></td></tr></table></figure>
<hr>
<p>未完待续</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近Xib+Autolayout用的比较多，也学习到不少内容，在这里总结出来。&lt;/p&gt;
&lt;h3 id=&quot;Label布局&quot;&gt;&lt;a href=&quot;#Label布局&quot; class=&quot;headerlink&quot; title=&quot;Label布局&quot;&gt;&lt;/a&gt;Label布局&lt;/h3&gt;&lt;p&gt;一般情况下，只需设置其左边距、上边距约束即可。
    
    </summary>
    
    
      <category term="Autolayout" scheme="https://elviszp.github.io/tags/Autolayout/"/>
    
      <category term="iOS" scheme="https://elviszp.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>改变</title>
    <link href="https://elviszp.github.io/2016/11/23/2016-11-23%20%E6%94%B9%E5%8F%98/"/>
    <id>https://elviszp.github.io/2016/11/23/2016-11-23 改变/</id>
    <published>2016-11-23T03:56:49.000Z</published>
    <updated>2016-11-26T13:51:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从11年开始编码，至今5年。前面两三年处于摸索阶段，没什么成长。最近两年，或多或少积累了点开发经验，由于不善于表达，之前都是断断续续的记在笔记里，没有形成体系，也影响了个人的技术成长。<br><a id="more"></a><br>在这个时间点上，还是打算做出一点改变，即使大部分内容网上都已有相关文章，也需要总结出来，算是强迫自己写点东西，做出改变。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从11年开始编码，至今5年。前面两三年处于摸索阶段，没什么成长。最近两年，或多或少积累了点开发经验，由于不善于表达，之前都是断断续续的记在笔记里，没有形成体系，也影响了个人的技术成长。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
