<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ElvisZP</title>
  <subtitle>记录成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://elviszp.github.io/"/>
  <updated>2016-12-03T15:41:42.000Z</updated>
  <id>https://elviszp.github.io/</id>
  
  <author>
    <name>zhang peng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Core Animation总结(二):显式动画</title>
    <link href="https://elviszp.github.io/2016/12/03/2016-12-03%20Core%20Animation-2.html"/>
    <id>https://elviszp.github.io/2016/12/03/2016-12-03 Core Animation-2.html</id>
    <published>2016-12-03T14:02:01.000Z</published>
    <updated>2016-12-03T15:41:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>显式动画的基础是CAAnimation，我们来看看CAAnimation的结构</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> CAAnimation&lt;CAMediaTiming,CAAction&gt;</span></div><div class="line">	-<span class="ruby"> CAAnimationGroup</span></div><div class="line">	-<span class="ruby"> CAPropertAnimation</span></div><div class="line">		-<span class="ruby"> CABasicAnimation</span></div><div class="line">		-<span class="ruby"> CAKeyframeAnimation</span></div><div class="line">	-<span class="ruby"> CATransition</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="CAPropertAnimation"><a href="#CAPropertAnimation" class="headerlink" title="CAPropertAnimation"></a>CAPropertAnimation</h3><p>属性动画，作用于图层的某个单一属性，并指定了它的一个目标值，或者一连串将要做动画的值。属性动画分为两种：基础和关键帧。</p>
<h4 id="CABasicAnimation"><a href="#CABasicAnimation" class="headerlink" title="CABasicAnimation"></a>CABasicAnimation</h4><p>通过keyPath来指定目标属性的动画，通过fromValue、byValue、toValue来指定起始/结束值。项目于隐式动画来说，没什么优势，如果单纯设置起始/结束值，直接用隐式动画即可。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.explicitLayer = [[<span class="built_in">CALayer</span> alloc]init];</div><div class="line">    <span class="keyword">self</span>.explicitLayer.frame = <span class="built_in">CGRectMake</span>(<span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line">    <span class="keyword">self</span>.explicitLayer.backgroundColor = [<span class="built_in">UIColor</span> redColor].CGColor;</div><div class="line">    [<span class="keyword">self</span>.view.layer addSublayer:<span class="keyword">self</span>.explicitLayer];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">IBAction</span>)clickBasicAnimation:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="comment">//创建基础动画，设置property为backgroundColor</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *basicAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"backgroundColor"</span>];</div><div class="line">    <span class="comment">//基础动画提供fromValue、byValue、toValue。用于指定开始值和目标值。</span></div><div class="line">    basicAnimation.toValue = (__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIColor</span> yellowColor].CGColor);</div><div class="line">    <span class="comment">//动画时间</span></div><div class="line">    basicAnimation.duration = <span class="number">5</span>;</div><div class="line">    <span class="comment">//动画完成后是否移除效果</span></div><div class="line">    basicAnimation.removedOnCompletion = <span class="literal">false</span>;</div><div class="line">    <span class="comment">//基础动画默认是没有设置任何属性的值，通过fillMode来解决此问题</span></div><div class="line">    basicAnimation.fillMode = kCAFillModeForwards;</div><div class="line">    <span class="comment">//添加到图层上执行动画</span></div><div class="line">    [<span class="keyword">self</span>.explicitLayer addAnimation:basicAnimation forKey:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="CAKeyframeAnimation"><a href="#CAKeyframeAnimation" class="headerlink" title="CAKeyframeAnimation"></a>CAKeyframeAnimation</h4><p>跟CABasicAnimation相比，优势在于能够设置一连串值来做动画。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)clickKeyframeAnimation:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> *keyframeAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"backgroundColor"</span>];</div><div class="line">    keyframeAnimation.values = @[(__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIColor</span> yellowColor].CGColor),(__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIColor</span> blueColor].CGColor),(__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIColor</span> purpleColor].CGColor)];</div><div class="line">    keyframeAnimation.duration = <span class="number">5</span>;</div><div class="line">    keyframeAnimation.removedOnCompletion = <span class="literal">false</span>;</div><div class="line">    keyframeAnimation.fillMode = kCAFillModeForwards;</div><div class="line">    [<span class="keyword">self</span>.explicitLayer addAnimation:keyframeAnimation forKey:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过values来设置不同的值，另外还可以通过path来设置动画路径，通过keyTimes来设置不同阶段的动画时间。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)clickKeyframeAnimationWithPath:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> *keyframeAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"position"</span>];</div><div class="line">    keyframeAnimation.path = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="keyword">self</span>.explicitLayer.frame cornerRadius:<span class="number">50</span>].CGPath;</div><div class="line">    keyframeAnimation.removedOnCompletion = <span class="literal">false</span>;</div><div class="line">    keyframeAnimation.fillMode = kCAFillModeForwards;</div><div class="line">    [<span class="keyword">self</span>.explicitLayer addAnimation:keyframeAnimation forKey:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="CAAnimationGroup"><a href="#CAAnimationGroup" class="headerlink" title="CAAnimationGroup"></a>CAAnimationGroup</h4><p>CAAnimationGroup可以将多个属性动画结合起来。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)clickGroupAnimation:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> *keyframeAnimation1 = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"backgroundColor"</span>];</div><div class="line">    keyframeAnimation1.values = @[(__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIColor</span> yellowColor].CGColor),(__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIColor</span> blueColor].CGColor),(__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIColor</span> purpleColor].CGColor)];</div><div class="line">    </div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> *keyframeAnimation2 = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"position"</span>];</div><div class="line">    keyframeAnimation2.path = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="keyword">self</span>.explicitLayer.frame cornerRadius:<span class="number">50</span>].CGPath;</div><div class="line">    </div><div class="line">    <span class="built_in">CAAnimationGroup</span> *groupAnimation = [[<span class="built_in">CAAnimationGroup</span> alloc]init];</div><div class="line">    groupAnimation.animations = @[keyframeAnimation1, keyframeAnimation2];</div><div class="line">    groupAnimation.duration = <span class="number">5</span>;</div><div class="line">    groupAnimation.removedOnCompletion = <span class="literal">false</span>;</div><div class="line">    groupAnimation.fillMode = kCAFillModeForwards;</div><div class="line">    [<span class="keyword">self</span>.explicitLayer addAnimation:groupAnimation forKey:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="CATransition"><a href="#CATransition" class="headerlink" title="CATransition"></a>CATransition</h4><p>过渡动画。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;显式动画的基础是CAAnimation，我们来看看CAAnimation的结构&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt; CAAnimation&amp;lt;CAMediaTiming,CAAction&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;	-&lt;span class=&quot;ruby&quot;&gt; CAAnimationGroup&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;	-&lt;span class=&quot;ruby&quot;&gt; CAPropertAnimation&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;		-&lt;span class=&quot;ruby&quot;&gt; CABasicAnimation&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;		-&lt;span class=&quot;ruby&quot;&gt; CAKeyframeAnimation&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;	-&lt;span class=&quot;ruby&quot;&gt; CATransition&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://elviszp.github.io/tags/iOS/"/>
    
      <category term="Core Animation" scheme="https://elviszp.github.io/tags/Core-Animation/"/>
    
  </entry>
  
  <entry>
    <title>Core Animation总结(一):CALayer</title>
    <link href="https://elviszp.github.io/2016/12/03/2016-12-03%20Core%20Animation-1.html"/>
    <id>https://elviszp.github.io/2016/12/03/2016-12-03 Core Animation-1.html</id>
    <published>2016-12-03T05:02:01.000Z</published>
    <updated>2016-12-03T15:41:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Core-Animation是什么？"><a href="#Core-Animation是什么？" class="headerlink" title="Core Animation是什么？"></a>Core Animation是什么？</h3><p>通过<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514" target="_blank" rel="external">Core Animation Programming Guide</a>文档我们可以看到，Core Animation不仅仅提供了动画功能，它还是iOS/OS X上负责图形渲染的基础设施。在iOS中，它是通过QuartzCore.framework框架来提供的。<br>下图是文档中提供的架构图，可以看出，Core Animation是基于Core Graphics和OpenGL的封装。</p>
<p><img src="/images/14807455809639.png" alt=""><br><a id="more"></a></p>
<h3 id="CALayer是什么？"><a href="#CALayer是什么？" class="headerlink" title="CALayer是什么？"></a>CALayer是什么？</h3><p>CALayer是QuartzCore.framework的核心，CALayer管理你需要显示的内容，然后将内容缓存到一副位图当中，最终用户看到的界面，就是CALayer合成之后的结果。<br>到这里我们会有一个疑问，既然CALayer才是真正处理图形渲染和动画效果的，<em>那么我们为什么还需要UIView?</em><br>简单来说，UIView就是对CALayer的简单封装，每个UIView管理维护着一个CSLayer，也就是所谓的backing layer，在UIView创建的时候，会自动创建这个CALayer，同时将CALayer的delegate(动画行为委托)指向该UIView。CALayer负责处理图形渲染和动画效果，UIView负责响应外部事件。这样职责分离，底层的Core Animation代码就能够在iOS和OS X中复用。<br>我们对视图的大部分操作都能通过UIView开放的API来实现，不过有一些高级特性需要直接使用CALayer提供的API：如圆角、阴影、边框等。</p>
<h3 id="CALayer基本操作"><a href="#CALayer基本操作" class="headerlink" title="CALayer基本操作"></a>CALayer基本操作</h3><p>下面代码是对CALayer的一些基本属性的操作：contents、cornerRadius、masksToBounds、mask。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">-(<span class="keyword">void</span>)testContents&#123;</div><div class="line">    <span class="keyword">self</span>.layerView.layer.contents = (__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIImage</span> imageNamed:<span class="string">@"gyy"</span>].CGImage);</div><div class="line">    <span class="comment">//图片填充类型：类似于UIImageView的contentMode属性</span></div><div class="line">    <span class="keyword">self</span>.layerView.layer.contentsGravity = kCAGravityResizeAspect;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)testBorder&#123;</div><div class="line">    <span class="keyword">self</span>.layerView.layer.borderColor = [<span class="built_in">UIColor</span> blueColor].CGColor;</div><div class="line">    <span class="keyword">self</span>.layerView.layer.borderWidth = <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)testCornerRadius&#123;</div><div class="line">    <span class="comment">//设置圆角会造成离屏渲染，如果页面有多个圆角，则使用CoreGraphcies来进入圆角绘制。</span></div><div class="line">    <span class="keyword">self</span>.layerView.layer.cornerRadius = <span class="number">30</span>;</div><div class="line">    <span class="keyword">self</span>.layerView.layer.masksToBounds = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)testMask&#123;</div><div class="line">    <span class="built_in">UIImageView</span> *imageView = [[<span class="built_in">UIImageView</span> alloc]initWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"gyy"</span>]];</div><div class="line">    imageView.frame = <span class="built_in">CGRectMake</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">300</span>, <span class="number">192</span>);</div><div class="line">    [<span class="keyword">self</span>.view addSubview:imageView];</div><div class="line">    </div><div class="line">    <span class="built_in">CALayer</span> *maskLayer = [[<span class="built_in">CALayer</span> alloc]init];</div><div class="line">    maskLayer.contents =(<span class="keyword">id</span>)[[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"logo"</span>] <span class="built_in">CGImage</span>];</div><div class="line">    maskLayer.frame = <span class="built_in">CGRectMake</span>(<span class="number">50</span>, <span class="number">40</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">    imageView.layer.mask = maskLayer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="隐式动画"><a href="#隐式动画" class="headerlink" title="隐式动画"></a>隐式动画</h3><p>什么是隐式动画，我们先来看代码。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ImplicitAnimationViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ImplicitAnimationViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CALayer</span> *implicitLayer;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ImplicitAnimationViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.implicitLayer = [[<span class="built_in">CALayer</span> alloc]init];</div><div class="line">    <span class="keyword">self</span>.implicitLayer.frame = <span class="built_in">CGRectMake</span>(<span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line">    <span class="keyword">self</span>.implicitLayer.backgroundColor = [<span class="built_in">UIColor</span> redColor].CGColor;</div><div class="line">    [<span class="keyword">self</span>.view.layer addSublayer:<span class="keyword">self</span>.implicitLayer];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">IBAction</span>)clickChangeFrame:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="built_in">CGRect</span> frame = <span class="keyword">self</span>.implicitLayer.frame;</div><div class="line">    frame.size.width = frame.size.width * <span class="number">1.2</span>;</div><div class="line">    frame.size.height = frame.size.height * <span class="number">1.2</span>;</div><div class="line">    <span class="keyword">self</span>.implicitLayer.frame = frame;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">IBAction</span>)clickChangeColor:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="keyword">self</span>.implicitLayer.backgroundColor = [<span class="built_in">UIColor</span> yellowColor].CGColor;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>在代码中，仅仅改变了自定义layer的属性，没有指定动画操作，不过却有动画效果(平滑过渡)。<br>这就是隐式动画，就是我们没有指定任何动画类型，仅改变一个属性，然后Core Animation来决定如何去做动画。但是当layer附加在view上时，隐式动画就不执行了。<br>问题是如果我们想自己控制这个动画呢？这里就引出另外一个知识点<em>CATransaction</em>。</p>
<blockquote>
<p>CATransaction动画事务，可以对多个layer属性同时进行修改，也分为隐式事务、显示事务。</p>
</blockquote>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (IBAction)clickTransaction:(id)sender &#123;</div><div class="line">    [CATransaction <span class="built_in">begin</span>];</div><div class="line">    <span class="comment">//设置动画执行时间。</span></div><div class="line">    [CATransaction setAnimationDuration:<span class="number">5</span>];</div><div class="line">    CGRect frame = self.implicitLayer.frame;</div><div class="line">    frame.<span class="built_in">size</span>.<span class="built_in">width</span> = frame.<span class="built_in">size</span>.<span class="built_in">width</span> * <span class="number">1.2</span>;</div><div class="line">    frame.<span class="built_in">size</span>.<span class="built_in">height</span> = frame.<span class="built_in">size</span>.<span class="built_in">height</span> * <span class="number">1.2</span>;</div><div class="line">    self.implicitLayer.frame = frame;</div><div class="line">    [CATransaction commit];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>begin开始事务，commit提交事务到runloop执行。如果没有显式的调用begin，那么在每个runloop周期循环中属性的改变都会被集中起来，然后做一次0.25秒的动画。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Core-Animation是什么？&quot;&gt;&lt;a href=&quot;#Core-Animation是什么？&quot; class=&quot;headerlink&quot; title=&quot;Core Animation是什么？&quot;&gt;&lt;/a&gt;Core Animation是什么？&lt;/h3&gt;&lt;p&gt;通过&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514&quot;&gt;Core Animation Programming Guide&lt;/a&gt;文档我们可以看到，Core Animation不仅仅提供了动画功能，它还是iOS/OS X上负责图形渲染的基础设施。在iOS中，它是通过QuartzCore.framework框架来提供的。&lt;br&gt;下图是文档中提供的架构图，可以看出，Core Animation是基于Core Graphics和OpenGL的封装。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/14807455809639.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://elviszp.github.io/tags/iOS/"/>
    
      <category term="Core Animation" scheme="https://elviszp.github.io/tags/Core-Animation/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络基础备忘</title>
    <link href="https://elviszp.github.io/2016/11/30/2016-11-30%20ji-suan-ji-wang-luo.html"/>
    <id>https://elviszp.github.io/2016/11/30/2016-11-30 ji-suan-ji-wang-luo.html</id>
    <published>2016-11-30T12:02:01.000Z</published>
    <updated>2016-11-30T14:37:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><p>OSI参考模型将分组通信协议整理成容易理解的7个分层：</p>
<ul>
<li><strong>物理层</strong></li>
</ul>
<blockquote>
<p>负责将bit流(0、1)转换为电压的高低、脉冲光的闪灭，传输给物理介质。</p>
</blockquote>
<ul>
<li><strong>数据链路层</strong></li>
</ul>
<blockquote>
<p>负责物理层面上的互连的、节点之间的通信传输。 作用是：物理地址寻址(mac地址)、流量控制、重发机制等。负责一个分段内的数据传输。</p>
</blockquote>
<ul>
<li><strong>网络层</strong></li>
</ul>
<blockquote>
<p>将数据传输到目标地址。主要负责寻址和路由选择。根据发送优先权、网络拥堵程度等来决定路由。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><strong>传输层</strong></li>
</ul>
<blockquote>
<p>管理两个节点之间的数据传输、起可靠传输作用。提供流量控制、监控服务质量。</p>
</blockquote>
<ul>
<li><strong>会话层</strong></li>
</ul>
<blockquote>
<p>负责建立与断开通信连接以及数据分割工作。</p>
</blockquote>
<ul>
<li><strong>表示层</strong></li>
</ul>
<blockquote>
<p>负责网络传输格式 与 应用处理的信息之间的转换。将设备固有格式转换为网络标准传输格式。</p>
</blockquote>
<ul>
<li><strong>应用层</strong></li>
</ul>
<blockquote>
<p>为用户的应用程序提供网络服务。(文件传输、电子邮件、远程登录)</p>
</blockquote>
<h3 id="一些基本网络设备"><a href="#一些基本网络设备" class="headerlink" title="一些基本网络设备"></a>一些基本网络设备</h3><p><strong>中继器</strong>： 对收到的0、1波形，进行相应的放大和转发，可以在双绞线电缆和光纤电缆之间进行转换。 对应物理层。<br><strong>网桥(2层交换机)</strong>：识别数据帧、重构数据帧转发，并且能够丢弃错误的数据帧。 对应数据链路层。<br><strong>路由器(3层交换机)</strong>：判断网络路径，转发至目标地址。 对应网络层。<br><strong>4-7层交换机</strong>： 负载均衡器、防火墙、广域网加速器。</p>
<h3 id="TCP-IP-分层"><a href="#TCP-IP-分层" class="headerlink" title="TCP/IP 分层"></a>TCP/IP 分层</h3><ul>
<li>物理层(硬件、网络接口)</li>
<li>互联网层(IP)</li>
<li>传输层(TCP、UDP)</li>
<li>应用层(TELNET、SSH、HTTP、SMTP、POP、SSL/TLS、FTP)</li>
</ul>
<p>发送端：</p>
<ol>
<li>应用层处理：编码处理、管理控制。</li>
<li>传输层处理：TCP根据应用指示，负责建立连接、发送数据、段考连接。在这里会对数据进行包装，添加TCP首部，包含源端口号和目标端口号、序列、校验和。</li>
<li>网络层处理：IP会根据TCP传过来的数据，添加上IP首部，会添加上源IP地址和目标IP地址，然后根据目标IP地址，参考路由控制表，发送给对应路由器和主机网络接口的驱动程序。</li>
<li>物理层处理：添加以太网首部，包含MAC地址。然后发送出去。</li>
</ol>
<p>接收端从底至上处理、解析首部文件，校验文件正确性。</p>
<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP是一个面向有连接的协议，实现了数据传输时的各种控制、数据重发机制、对次序乱掉的分包进行顺序控制。<br>TCP通过校验和、序列号、确认应答(ACK)、重发控制、连接管理等机制实现了可靠性管理。</p>
<p><strong>TCP建立连接过程：</strong></p>
<ol>
<li>客户端发送SYN。</li>
<li>服务端回复ACK和SYN。</li>
<li>客户端回复ACK。</li>
</ol>
<p><em>发送第一个SYN的一方叫做客户端，接收方叫服务端。</em></p>
<p><strong>断开连接过程</strong></p>
<ol>
<li>客户端发送FIN。</li>
<li>服务端回复ACK。</li>
<li>服务端发送FIN。</li>
<li>客户端发送ACK。</li>
</ol>
<blockquote>
<p>SYN：请求建立连接。<br>FIN：请求断开连接。<br>ACK：确认应答。</p>
</blockquote>
<hr>
<p>关于TCP/IP的具体实现就不总结了，需要的时候在翻阅书籍了。<br>IP包括：IP地址、IP多播、子网掩码、路由控制、路由算法、IP分割处理及再构成处理、IPv6、IP首部。相关的有DNS、ARP。<br>TCP还有其具体实现：序列号和确认应答、超时重发机制、窗口控制、连接管理、流控制、拥塞控制等。</p>
<p>HTTP协议、网络安全就留到下一篇。</p>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="https://book.douban.com/subject/1088054/" target="_blank" rel="external">TCP/IP详解 卷1：协议</a></li>
<li><a href="https://book.douban.com/subject/24737674/" target="_blank" rel="external">图解TCP/IP</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;OSI参考模型&quot;&gt;&lt;a href=&quot;#OSI参考模型&quot; class=&quot;headerlink&quot; title=&quot;OSI参考模型&quot;&gt;&lt;/a&gt;OSI参考模型&lt;/h3&gt;&lt;p&gt;OSI参考模型将分组通信协议整理成容易理解的7个分层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;物理层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;负责将bit流(0、1)转换为电压的高低、脉冲光的闪灭，传输给物理介质。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据链路层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;负责物理层面上的互连的、节点之间的通信传输。 作用是：物理地址寻址(mac地址)、流量控制、重发机制等。负责一个分段内的数据传输。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;将数据传输到目标地址。主要负责寻址和路由选择。根据发送优先权、网络拥堵程度等来决定路由。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="TCP/IP" scheme="https://elviszp.github.io/tags/TCP-IP/"/>
    
      <category term="计算机网络" scheme="https://elviszp.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>GPUImage使用总结（一）</title>
    <link href="https://elviszp.github.io/2016/11/30/2016-11-30%20GPUImage-zong-jie-1.html"/>
    <id>https://elviszp.github.io/2016/11/30/2016-11-30 GPUImage-zong-jie-1.html</id>
    <published>2016-11-30T03:02:01.000Z</published>
    <updated>2016-11-30T03:41:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>###GPUImage导入<br>Github：<a href="https://github.com/BradLarson/GPUImage" target="_blank" rel="external">https://github.com/BradLarson/GPUImage</a><br><strong>1.CocoaPods导入。</strong></p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">pod</span> <span class="string">'GPUImage'</span></div></pre></td></tr></table></figure>
<p><strong>2.手动导入。</strong></p>
<blockquote>
<p>将GPUImage.xcodeproj拖入项目， Embedded Binaries添加GPUImage.framework依赖。另外再添加以下5依赖项：</p>
<ul>
<li>CoreMedia</li>
<li>CoreVideo</li>
<li>OpenGLES</li>
<li>AVFoundation</li>
<li>QuartzCore</li>
</ul>
</blockquote>
<a id="more"></a>
<h3 id="GPUImage-结构"><a href="#GPUImage-结构" class="headerlink" title="GPUImage 结构"></a>GPUImage 结构</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> Sources</span></div><div class="line">	-<span class="ruby"> <span class="symbol">GPUImagePicture:</span> 静态图片</span></div><div class="line">	-<span class="ruby"> <span class="symbol">GPUImageMovie:</span> 静态视频</span></div><div class="line">	-<span class="ruby"> <span class="symbol">GPUImageStillCamera:</span> 实时照片拍摄</span></div><div class="line">	-<span class="ruby"> <span class="symbol">GPUImageVideoCamera:</span> 实时视频拍摄</span></div><div class="line">-<span class="ruby"> Pipeline</span></div><div class="line">	-<span class="ruby"> GPUImageFilterPipeline</span></div><div class="line">-<span class="ruby"> Filters</span></div><div class="line">	-<span class="ruby"> Color <span class="symbol">adjustments:</span> 颜色处理相关</span></div><div class="line">	-<span class="ruby"> Image <span class="symbol">processing:</span> 图像处理相关</span></div><div class="line">	-<span class="ruby"> Blending <span class="symbol">modes:</span> 混合模式相关</span></div><div class="line">	-<span class="ruby"> Visual <span class="symbol">effects:</span> 视觉效果相关</span></div><div class="line">	-<span class="ruby"> Custom <span class="symbol">filters:</span> 允许用户自定义滤镜</span></div><div class="line">-<span class="ruby"> Outputs</span></div><div class="line">	-<span class="ruby"> GPUImageView</span></div></pre></td></tr></table></figure>
<p><strong>GPUImage使用流程：</strong></p>
<ol>
<li>获取数据源，GPUImage提供了4种数据来源渠道。</li>
<li>添加滤镜。(如果需要使用多个滤镜，可以使用GPUImage提供的GPUImageFilterPipeline来添加)</li>
<li>数据输出。</li>
</ol>
<h3 id="滤镜初步使用"><a href="#滤镜初步使用" class="headerlink" title="滤镜初步使用"></a>滤镜初步使用</h3><p><strong>import头文件</strong></p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//收到导入framework时使用</span></div><div class="line">#<span class="keyword">import</span> &lt;GPUImage/GPUImageFramework.h&gt;</div><div class="line"><span class="comment">//导入libGUPImage.a或者CocoaPods导入时使用</span></div><div class="line">#<span class="keyword">import</span> <span class="string">"GPUImage.h"</span></div></pre></td></tr></table></figure>
<p><strong>静态图片，单个滤镜</strong></p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">   <span class="comment">//获取本地图片</span></div><div class="line">    UIImage *inputImage = [UIImage imageNamed:@<span class="string">"2"</span>];</div><div class="line">	<span class="comment">//创建Filter，在头文件里能看到有很多种GPUImage提供的滤镜。</span></div><div class="line">    GPUImageVignetteFilter *<span class="built_in">filter</span> = [[GPUImageVignetteFilter alloc] init];</div><div class="line">    <span class="comment">//设置要渲染的区域</span></div><div class="line">    [<span class="built_in">filter</span> forceProcessingAtSize:inputImage.<span class="built_in">size</span>];</div><div class="line">    [<span class="built_in">filter</span> useNextFrameForImageCapture];</div><div class="line">    <span class="comment">//获取数据源</span></div><div class="line">    GPUImagePicture *stillImageSource = [[GPUImagePicture alloc]initWithImage:inputImage];</div><div class="line">    <span class="comment">//添加滤镜</span></div><div class="line">    [stillImageSource addTarget:<span class="built_in">filter</span>];</div><div class="line">    <span class="comment">//开始渲染</span></div><div class="line">    [stillImageSource processImage];</div><div class="line">    <span class="comment">//获取渲染后的图片</span></div><div class="line">    UIImage *newImage = [<span class="built_in">filter</span> imageFromCurrentFramebuffer];</div><div class="line">    UIImageView *imageView = [[UIImageView alloc] initWithImage:newImage];</div><div class="line">    imageView.frame = CGRectMake(<span class="number">0</span>,<span class="number">50</span>,inputImage.<span class="built_in">size</span>.<span class="built_in">width</span> ,inputImage.<span class="built_in">size</span>.<span class="built_in">height</span>);</div><div class="line">    [self.view addSubview:imageView];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>实时视频拍摄，使用Pipeline</strong></p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">-(void)video&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     创建视频源</div><div class="line">     sessionPreset:屏幕分辨率</div><div class="line">     cameraPosition:摄像头位置</div><div class="line">     */</div><div class="line">    <span class="symbol">_videoCamera</span> = [[<span class="symbol">GPUImageVideoCamera</span> alloc] initWithSessionPreset:<span class="symbol">AVCaptureSessionPresetHigh</span> cameraPosition:<span class="symbol">AVCaptureDevicePositionFront</span>];</div><div class="line">    <span class="symbol">_videoCamera</span>.outputImageOrientation = <span class="symbol">UIInterfaceOrientationPortrait</span>;</div><div class="line"></div><div class="line">    // 创建最终预览<span class="symbol">View</span></div><div class="line">    <span class="symbol">_captureVideoPreview</span> = [[<span class="symbol">GPUImageView</span> alloc] initWithFrame:self.view.bounds];</div><div class="line">    [self.view insertSubview:<span class="symbol">_captureVideoPreview</span> atIndex:<span class="number">0</span>];</div><div class="line">    </div><div class="line">    <span class="symbol">GPUImageBilateralFilter</span> *bilateralFilter = [[<span class="symbol">GPUImageBilateralFilter</span> alloc] init];</div><div class="line">    <span class="symbol">GPUImageFilterPipeline</span> *pipeline = [[<span class="symbol">GPUImageFilterPipeline</span> alloc] initWithOrderedFilters:@[bilateralFilter] input:<span class="symbol">_videoCamera</span> output:<span class="symbol">_captureVideoPreview</span>];</div><div class="line">        <span class="symbol">GPUImageSepiaFilter</span> *sepiaFilter = [[<span class="symbol">GPUImageSepiaFilter</span> alloc] init];</div><div class="line">    [pipeline addFilter:sepiaFilter];</div><div class="line">    //可添加多个滤镜</div><div class="line">    [<span class="symbol">_videoCamera</span> startCameraCapture];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###GPUImage导入&lt;br&gt;Github：&lt;a href=&quot;https://github.com/BradLarson/GPUImage&quot;&gt;https://github.com/BradLarson/GPUImage&lt;/a&gt;&lt;br&gt;&lt;strong&gt;1.CocoaPods导入。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;GPUImage&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2.手动导入。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将GPUImage.xcodeproj拖入项目， Embedded Binaries添加GPUImage.framework依赖。另外再添加以下5依赖项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CoreMedia&lt;/li&gt;
&lt;li&gt;CoreVideo&lt;/li&gt;
&lt;li&gt;OpenGLES&lt;/li&gt;
&lt;li&gt;AVFoundation&lt;/li&gt;
&lt;li&gt;QuartzCore&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://elviszp.github.io/tags/iOS/"/>
    
      <category term="GPUImage" scheme="https://elviszp.github.io/tags/GPUImage/"/>
    
  </entry>
  
  <entry>
    <title>ELProgressView备忘</title>
    <link href="https://elviszp.github.io/2016/11/29/2016-11-28%20ELProgressView-bei-wang.html"/>
    <id>https://elviszp.github.io/2016/11/29/2016-11-28 ELProgressView-bei-wang.html</id>
    <published>2016-11-28T17:02:01.000Z</published>
    <updated>2016-11-29T04:31:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前有做一个需要圆形进度条的项目，现在提交到Github上去了：<a href="https://github.com/ElvisZP/ELCircleProgressView" target="_blank" rel="external">https://github.com/ElvisZP/ELCircleProgressView</a> 。<br>总结一下里面用到的知识点，没什么难度，仅当做备忘。另外后续会添加Cocoapod、Carthage支持。</p>
<h3 id="CALayer"><a href="#CALayer" class="headerlink" title="CALayer"></a>CALayer</h3><p>CALayer和UIView的关系</p>
<blockquote>
<p>每一个UIView都有一个CALayer实例的图层属性，UIView的职责就是创建并管理这个CALayer。实际上，CALayer才是真正用来处理图层的渲染以及动画的，UIView仅仅是对它的一个封装。UIView集成UIResponder处理事件。这样做，为了职责分离，方便底层Core Animation能够在OSX和iOS上重用。<a id="more"></a></p>
</blockquote>
<p>我们对视图大部分的操作都能通过UIView暴露出来的API来实现，不过有一些高级特性需要直接使用CALayer提供的方法：圆角、阴影、边框操作等。<br>CALayer有一个delegate属性，实现了CALayerDelegate协议，当UIView创建它时，它会自动把图层delegate指向UIView。</p>
<p>当我们单独使用CALayer时，如果需要响应触摸事件，一般使用-hitTest:方法即可。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span> *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</div><div class="line">&#123;</div><div class="line">    <span class="comment">//get touch position</span></div><div class="line">    <span class="built_in">CGPoint</span> point = [[touches anyObject] locationInView:<span class="keyword">self</span>.view];</div><div class="line">    <span class="comment">//get touched layer</span></div><div class="line">    <span class="built_in">CALayer</span> *layer = [<span class="keyword">self</span>.layerView.layer hitTest:point];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CAShapeLayer"><a href="#CAShapeLayer" class="headerlink" title="CAShapeLayer"></a>CAShapeLayer</h3><p>CAShapeLayer是CALayer的子类，但是它比CALayer更加灵活，可以画出各种图形。与使用Core Graphics画图相比，CAShapeLayer有以下优点：</p>
<ul>
<li>渲染快速，CAShapeLayer使用了硬件加速。</li>
<li>高效使用内存。</li>
<li>不会被辩解裁剪。</li>
</ul>
<p>使用方法：</p>
<ol>
<li>创建图层</li>
<li>设置属性、添加path</li>
<li>添加到目标图层里<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CAShapeLayer</span> *circleLayer = [[<span class="built_in">CAShapeLayer</span> alloc] init];</div><div class="line">circleLayer.strokeEnd = <span class="number">0</span>;</div><div class="line">circleLayer.strokeStart = <span class="number">0</span>;</div><div class="line">circleLayer.fillColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">circleLayer.lineCap = kCALineCapRound;</div><div class="line">circleLayer.lineJoin = kCALineJoinRound;</div><div class="line">circleLayer.borderColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line"></div><div class="line"><span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:<span class="built_in">CGPointMake</span>(width/<span class="number">2</span>, height/<span class="number">2</span>) radius:width/<span class="number">2</span> startAngle:<span class="keyword">self</span>.startAngle endAngle:<span class="keyword">self</span>.endAngle clockwise:<span class="literal">true</span>];</div><div class="line">circleLayer.frame = <span class="keyword">self</span>.view.bounds;</div><div class="line">circleLayer.strokeColor = <span class="keyword">self</span>.foreStrokeColor.CGColor;</div><div class="line">circleLayer.path = [<span class="keyword">self</span> shapeLayerPath].CGPath;</div><div class="line">circleLayer.lineWidth = <span class="keyword">self</span>.lineWidth;</div><div class="line"></div><div class="line">[<span class="keyword">self</span>.view.layer addSublayer: circleLayer];</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="NSTimer"><a href="#NSTimer" class="headerlink" title="NSTimer"></a>NSTimer</h3><p>使用方法：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建并添加到runloop中</span></div><div class="line">timer = [NSTimer <span class="string">scheduledTimerWithTimeInterval:</span><span class="number">1</span> <span class="string">target:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(ticker) <span class="string">userInfo:</span>nil <span class="string">repeats:</span>NO]; </div><div class="line"></div><div class="line"><span class="comment">//只创建，需要自己手动添加到指定runloop中工作</span></div><div class="line">_timer = [NSTimer <span class="string">timerWithTimeInterval:</span><span class="number">0.1</span> <span class="string">target:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(changeProgress) <span class="string">userInfo:</span>nil <span class="string">repeats:</span><span class="literal">true</span>];</div><div class="line">        [[NSRunLoop currentRunLoop] <span class="string">addTimer:</span>_timer <span class="string">forMode:</span>NSRunLoopCommonModes];</div></pre></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li>内存泄漏</li>
</ul>
<blockquote>
<p>timer会强引用传入的对象，所以一定不要在dealloc方法中调用结束方法，我一般是在viewDidDisappear中销毁对象</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)<span class="string">viewDidAppear:</span>(BOOL)animated&#123;</div><div class="line">    [<span class="keyword">super</span> <span class="string">viewDidAppear:</span>animated];</div><div class="line">    <span class="keyword">if</span>(_timer == nil)&#123;</div><div class="line">        _timer = [NSTimer <span class="string">scheduledTimerWithTimeInterval:</span><span class="number">2</span> <span class="string">target:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(changeProgress) <span class="string">userInfo:</span>nil <span class="string">repeats:</span><span class="literal">true</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">-(<span class="keyword">void</span>)<span class="string">viewDidDisappear:</span>(BOOL)animated&#123;</div><div class="line">    [<span class="keyword">super</span> <span class="string">viewDidDisappear:</span>animated];</div><div class="line">    <span class="keyword">if</span>(_timer != nil)&#123;</div><div class="line">        [_timer invalidate];</div><div class="line">        _timer = nil;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Runloop</li>
</ul>
<blockquote>
<p>NSTimer需要添加到runloop中才能运行。另外NSTimer默认是加入到NSDefaultRunLoopMode下的，所以在UITableView(UIScrollView)滑动时，NSTimer也是不工作的。如果需要滑动状态下也继续工作，就需要手动添加。</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)<span class="string">viewDidAppear:</span>(BOOL)animated&#123;</div><div class="line">    [<span class="keyword">super</span> <span class="string">viewDidAppear:</span>animated];</div><div class="line">    <span class="keyword">if</span>(_timer == nil)&#123;</div><div class="line">        _timer = [NSTimer <span class="string">timerWithTimeInterval:</span><span class="number">0.1</span> <span class="string">target:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(changeProgress) <span class="string">userInfo:</span>nil <span class="string">repeats:</span><span class="literal">true</span>];</div><div class="line">        [[NSRunLoop currentRunLoop] <span class="string">addTimer:</span>_timer <span class="string">forMode:</span>NSRunLoopCommonModes];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="layoutSubviews"><a href="#layoutSubviews" class="headerlink" title="layoutSubviews"></a>layoutSubviews</h3><p>调用场景：</p>
<ol>
<li>addSubview</li>
<li>设置frame(值发生了变化)</li>
<li>滚动UIScrollView</li>
<li>旋转Screen会触发父UIView上的layoutSubviews</li>
<li>改变一个UIView的大小，也会触发父UIView的layoutSubViews</li>
<li>直接调用setLayoutSubviews</li>
</ol>
<p>如果要立即刷新，那么先调用view.setNeedsLayout()标记，然后调用view.layoutIfNeeded()</p>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="https://book.douban.com/subject/25716177/" target="_blank" rel="external">iOS Core Animation: Advanced Techniques</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前有做一个需要圆形进度条的项目，现在提交到Github上去了：&lt;a href=&quot;https://github.com/ElvisZP/ELCircleProgressView&quot;&gt;https://github.com/ElvisZP/ELCircleProgressView&lt;/a&gt; 。&lt;br&gt;总结一下里面用到的知识点，没什么难度，仅当做备忘。另外后续会添加Cocoapod、Carthage支持。&lt;/p&gt;
&lt;h3 id=&quot;CALayer&quot;&gt;&lt;a href=&quot;#CALayer&quot; class=&quot;headerlink&quot; title=&quot;CALayer&quot;&gt;&lt;/a&gt;CALayer&lt;/h3&gt;&lt;p&gt;CALayer和UIView的关系&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个UIView都有一个CALayer实例的图层属性，UIView的职责就是创建并管理这个CALayer。实际上，CALayer才是真正用来处理图层的渲染以及动画的，UIView仅仅是对它的一个封装。UIView集成UIResponder处理事件。这样做，为了职责分离，方便底层Core Animation能够在OSX和iOS上重用。
    
    </summary>
    
    
      <category term="iOS" scheme="https://elviszp.github.io/tags/iOS/"/>
    
      <category term="ELProgressView" scheme="https://elviszp.github.io/tags/ELProgressView/"/>
    
      <category term="CALayer" scheme="https://elviszp.github.io/tags/CALayer/"/>
    
      <category term="NSTimer" scheme="https://elviszp.github.io/tags/NSTimer/"/>
    
      <category term="layoutSubviews" scheme="https://elviszp.github.io/tags/layoutSubviews/"/>
    
  </entry>
  
  <entry>
    <title>浅谈GCD</title>
    <link href="https://elviszp.github.io/2016/11/26/2016-11-26%20qian-tan-GCD.html"/>
    <id>https://elviszp.github.io/2016/11/26/2016-11-26 qian-tan-GCD.html</id>
    <published>2016-11-26T03:31:01.000Z</published>
    <updated>2016-11-26T16:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在iOS上使用多线程的方式有NSTread、NSOperationQueue、GCD，平时使用最多的就是GCD，使用起来也是最方便的，它提供了非常简洁的API来使用繁杂的多线程编程。<br>多线程的使用也会造成很多问题，比如数据竞争、死锁、线程过多导致内存过大以及切换线程影响性能。所以，在使用多线程编程的时候需要特别注意这些问题。<br>不过GCD是有系统来调度线程，所以它的效率会更好一些。</p>
<p>我们先来了解这几个概念：</p>
<p><strong>Dispatch Queue</strong><br>它是一个任务的操作队列，如果你要执行一个任务，那么就将它添加到一个适当的dispatch queue中。<br>dispatch queue有两种操作模式，并行与串行。每个程序系统自动提供了两种默认的queue，一种是串行的main queue(运行在主线程)，一种是并行的global queue，系统提供了获取方法。<br>除此之外，系统也提供了api来创建不同的dispatch queue。<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取默认的main queue</span></div><div class="line"><span class="keyword">dispatch_queue_t</span> mainQueue = dispatch_get_main_queue();</div><div class="line"><span class="comment">/*</span></div><div class="line">*  获取默认的并行线程global queue，第一个参数传递优先级</div><div class="line">*  DISPATCH_QUEUE_PRIORITY_HIGH</div><div class="line">*  DISPATCH_QUEUE_PRIORITY_DEFAULT</div><div class="line">*  DISPATCH_QUEUE_PRIORITY_LOW</div><div class="line">*  DISPATCH_QUEUE_PRIORITY_BACKGROUND</div><div class="line">*/</div><div class="line"><span class="keyword">dispatch_queue_t</span> globalQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">*  自定义dispatch queue</div><div class="line">*  第一个参数： 队列名称</div><div class="line">*  第二个参数： NULL或者DISPATCH_QUEUE_SERIAL代表创建串行队列， DISPATCH_QUEUE_CONSURRENT代表创建并行队列</div><div class="line">*/</div><div class="line"><span class="keyword">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"com.xx.serial"</span>,<span class="literal">NULL</span>);</div><div class="line"><span class="keyword">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.xx.concurrent"</span>,DISPATCH_QUEUE_CONCURRENT);</div></pre></td></tr></table></figure></p>
<p>现在已经有了dispatch queue，那么就可以来执行任务了。</p>
<p><strong>dispatch_async dispatch_sync</strong><br>dispatch_async: 异步调度任务。<br>dispatch_sync: 同步调度任务，等待队列里面的操作完成之后，再继续执行。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;= <span class="number">10</span>; i++)&#123;</div><div class="line">	<span class="built_in">dispatch_async</span>(concurrentQueue, ^&#123;</div><div class="line">       <span class="built_in">NSLog</span>(<span class="string">@"%d____%@"</span>, i, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">   &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是运行结果</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338832</span>] <span class="number">1</span>____&lt;NSThread: <span class="number">0</span>x60800007ab40&gt;&#123;number = <span class="number">4</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338844</span>] <span class="number">0</span>____&lt;NSThread: <span class="number">0</span>x600<span class="number">00007c8c0</span>&gt;&#123;number = <span class="number">3</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338829</span>] <span class="number">2</span>____&lt;NSThread: <span class="number">0</span>x60000007ca80&gt;&#123;number = <span class="number">5</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338832</span>] <span class="number">4</span>____&lt;NSThread: <span class="number">0</span>x60800007ab40&gt;&#123;number = <span class="number">4</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338855</span>] <span class="number">3</span>____&lt;NSThread: <span class="number">0</span>x608<span class="number">00007b040</span>&gt;&#123;number = <span class="number">6</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338844</span>] <span class="number">6</span>____&lt;NSThread: <span class="number">0</span>x600<span class="number">00007c8c0</span>&gt;&#123;number = <span class="number">3</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.252</span> Test<span class="number">2[15610</span>:<span class="number">1338856</span>] <span class="number">5</span>____&lt;NSThread: <span class="number">0</span>x60000007cb80&gt;&#123;number = <span class="number">7</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.253</span> Test<span class="number">2[15610</span>:<span class="number">1338829</span>] <span class="number">7</span>____&lt;NSThread: <span class="number">0</span>x60000007ca80&gt;&#123;number = <span class="number">5</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.253</span> Test<span class="number">2[15610</span>:<span class="number">1338832</span>] <span class="number">8</span>____&lt;NSThread: <span class="number">0</span>x60800007ab40&gt;&#123;number = <span class="number">4</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.253</span> Test<span class="number">2[15610</span>:<span class="number">1338855</span>] <span class="number">9</span>____&lt;NSThread: <span class="number">0</span>x608<span class="number">00007b040</span>&gt;&#123;number = <span class="number">6</span>, name = (null)&#125;</div><div class="line"><span class="number">2016-11-26</span> <span class="number">16:46:40.253</span> Test<span class="number">2[15610</span>:<span class="number">1338857</span>] <span class="number">10</span>____&lt;NSThread: <span class="number">0</span>x60800007ac00&gt;&#123;number = <span class="number">8</span>, name = (null)&#125;</div></pre></td></tr></table></figure>
<p>能看出，由于使用的是并行队列，所以执行是无序的，另外系统自动分配了，在不同的线程中执行。</p>
<p><strong>dispatch_after</strong><br>有时候会有需求，在几秒钟之后执行某个任务，那么使用dispatch_after是再好不过了。<br>dispatch_after，在指定的时间，添加任务处理到dispatch_queue中去执行。这里要注意的是，并非延时运行，而是延时添加。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 具体时间</span></div><div class="line"><span class="comment">//2. 制定要追加处理的Dispatch Queue</span></div><div class="line"><span class="comment">//3. 需要执行的block</span></div><div class="line">dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW, <span class="number">3</span>ull * <span class="built_in">NSEC_PER_SEC</span>);</div><div class="line">dispatch_after(time, dispatch_get_main_queue(), ^&#123;</div><div class="line">   <span class="built_in">NSLog</span>(<span class="string">@""</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>dispatch_set_target_queue</strong><br>如果建立一个queue之后，想要更改它的优先级，就使用dispatch_set_target_queue。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果有多个serial Queue，设置优先级，可改变并行执行。</span></div><div class="line"><span class="keyword">dispatch_queue_t</span> mySerialQueue = dispatch_queue_create(<span class="string">"mySerialQueue"</span>, <span class="literal">NULL</span>);</div><div class="line"><span class="keyword">dispatch_queue_t</span> globalDispatchQueueBackground = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND,<span class="number">0</span>);</div><div class="line">dispatch_set_target_queue(mySerialQueue, globalDispatchQueueBackground);</div></pre></td></tr></table></figure>
<p><strong>dispatch_group</strong><br>同步多任务的一种方式，另外一种方式semaphone。<br>将任务添加到任务组中，然后监听任务组事件执行完毕。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t queue = dispatch_get_global_queue(<span class="name">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)<span class="comment">;</span></div><div class="line">dispatch_group_t group = dispatch_group_create()<span class="comment">;</span></div><div class="line">    </div><div class="line">dispatch_group_async(<span class="name">group</span>, queue, ^&#123;NSLog(@<span class="string">"1"</span>)<span class="comment">;&#125;);</span></div><div class="line">dispatch_group_async(<span class="name">group</span>, queue, ^&#123;NSLog(@<span class="string">"2"</span>)<span class="comment">;&#125;);</span></div><div class="line">dispatch_group_async(<span class="name">group</span>, queue, ^&#123;NSLog(@<span class="string">"3"</span>)<span class="comment">;&#125;);</span></div><div class="line">//为group添加过时时间</div><div class="line">dispatch_group_wait(<span class="name">group</span>, DISPATCH_TIME_FOREVER)<span class="comment">;</span></div><div class="line">//添加订阅，group中的任务都完成之后，会调用此block</div><div class="line">dispatch_group_notify(<span class="name">group</span>, dispatch_get_main_queue(), ^&#123;</div><div class="line">   NSLog(@<span class="string">"done"</span>)<span class="comment">;</span></div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p><strong>dispatch_barrier_async</strong><br>之前说过，多线程会导致数据竞争，dispatch_barrier_async能够解决这个问题。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是一系列读写操作。</span></div><div class="line"><span class="comment">//读取操作可以同时进行，不会对数据有影响，而写入操作需要单独运行。否则在写入的同时进行读取操作，那么很有可能会造成数据错误。所以在进行写入操作的时候，需要停止其他的操作。</span></div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk0_for_reading);</div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk1_for_reading);</div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk2_for_reading);</div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk3_for_reading);</div><div class="line"></div><div class="line"><span class="comment">//barrier_async会阻断前后线程的执行，避免数据竞争</span></div><div class="line">dispatch_barrier_async(<span class="built_in">queue</span>, blk_for_writing);</div><div class="line"></div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk4_for_reading);</div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk5_for_reading);</div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk6_for_reading);</div><div class="line">dispatch_async(<span class="built_in">queue</span>, blk7_for_reading);</div></pre></td></tr></table></figure>
<p><strong>dispatch_semaphore</strong><br>我们可以通过信号量来控制并发，semaphore有3个操作：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>dispatch_semaphore_create</td>
<td>创建一个semaphore</td>
</tr>
<tr>
<td>dispatch_semaphore_signal</td>
<td>发送一个信号</td>
</tr>
<tr>
<td>dispatch_semaphore_wait</td>
<td>等待信号</td>
</tr>
</tbody>
</table>
<ul>
<li>控制并发数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dispatch_group_t</span> group = dispatch_group_create();</div><div class="line"><span class="comment">//创建一个semaphore，dispatch_semaphore_create(long value)， 传入参数代表默认信号量总数。</span></div><div class="line"><span class="keyword">dispatch_semaphore_t</span> semaphore = dispatch_semaphore_create(<span class="number">10</span>);</div><div class="line"><span class="keyword">dispatch_queue_t</span> <span class="built_in">queue</span> = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</div><div class="line">&#123;</div><div class="line">   <span class="comment">//dispatch_semaphore_wait，</span></div><div class="line">   <span class="comment">//if semaphore &lt;= 0，等待，直到semaphore &gt; 0。</span></div><div class="line">   <span class="comment">//else 执行后续操作，同时semaphore-1</span></div><div class="line">   <span class="comment">//第二个参数，传入等待时间。</span></div><div class="line">   dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">   dispatch_group_async(group, <span class="built_in">queue</span>, ^&#123;</div><div class="line">       NSLog(@<span class="string">"%i"</span>,i);</div><div class="line">       sleep(<span class="number">2</span>);</div><div class="line">       <span class="comment">//发送信号，semaphore+1</span></div><div class="line">       dispatch_semaphore_signal(semaphore);</div><div class="line">   &#125;);</div><div class="line">&#125;</div><div class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div></pre></td></tr></table></figure>
<ul>
<li>加锁</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">NSURLSessionDelegate</span>&gt;</span>&#123;</div><div class="line">    dispatch_semaphore_t _lock;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)doSomething&#123;</div><div class="line">    dispatch_semaphore_wait(_lock, DISPATCH_TIME_FOREVER);</div><div class="line">    <span class="comment">// doSomething</span></div><div class="line">    dispatch_semaphore_signal(_lock);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    _lock = dispatch_semaphore_create(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>异步转同步</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在AFNetworking3.0 源码中，通过session获取task一个异步操作。</span></div><div class="line"><span class="comment">//通过semaphore来确保异步操作获取成功之后，再执行后续操作。</span></div><div class="line">- (<span class="built_in">NSArray</span> *)tasksForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</div><div class="line">    __block <span class="built_in">NSArray</span> *tasks = <span class="literal">nil</span>;</div><div class="line">    <span class="comment">//创建semaphore，并设置信号量为0.</span></div><div class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line">    [<span class="keyword">self</span>.session getTasksWithCompletionHandler:^(<span class="built_in">NSArray</span> *dataTasks, <span class="built_in">NSArray</span> *uploadTasks, <span class="built_in">NSArray</span> *downloadTasks) &#123;</div><div class="line">        <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(dataTasks))]) &#123;</div><div class="line">            tasks = dataTasks;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(uploadTasks))]) &#123;</div><div class="line">            tasks = uploadTasks;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(downloadTasks))]) &#123;</div><div class="line">            tasks = downloadTasks;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(tasks))]) &#123;</div><div class="line">            tasks = [@[dataTasks, uploadTasks, downloadTasks] valueForKeyPath:<span class="string">@"@unionOfArrays.self"</span>];</div><div class="line">        &#125;</div><div class="line">		<span class="comment">//发送信号，此时，外面等待的操作才得以继续进行。</span></div><div class="line">        dispatch_semaphore_signal(semaphore);</div><div class="line">    &#125;];</div><div class="line">	<span class="comment">//此时，由于semaphore为0，线程就会等待。知道异步操作里面执行了dispatch_semaphore_signal</span></div><div class="line">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">    <span class="keyword">return</span> tasks;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>dispatch_once</strong><br>这个是我们很熟悉的，一般用于创建单例。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype)sharedInstance</span></div><div class="line">&#123;</div><div class="line">	static <span class="keyword">dispatch_once_t </span>once<span class="comment">;</span></div><div class="line">	static id <span class="keyword">sharedInstance;</span></div><div class="line">	<span class="keyword">dispatch_once(&amp;once, </span>^&#123;</div><div class="line">		<span class="keyword">sharedInstance </span>= [[self alloc] init]<span class="comment">;</span></div><div class="line">	&#125;)<span class="comment">;</span></div><div class="line">	return <span class="keyword">sharedInstance;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在iOS上使用多线程的方式有NSTread、NSOperationQueue、GCD，平时使用最多的就是GCD，使用起来也是最方便的，它提供了非常简洁的API来使用繁杂的多线程编程。&lt;br&gt;多线程的使用也会造成很多问题，比如数据竞争、死锁、线程过多导致内存过大以及切换线程影响性能。所以，在使用多线程编程的时候需要特别注意这些问题。&lt;br&gt;不过GCD是有系统来调度线程，所以它的效率会更好一些。&lt;/p&gt;
&lt;p&gt;我们先来了解这几个概念：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dispatch Queue&lt;/strong&gt;&lt;br&gt;它是一个任务的操作队列，如果你要执行一个任务，那么就将它添加到一个适当的dispatch queue中。&lt;br&gt;dispatch queue有两种操作模式，并行与串行。每个程序系统自动提供了两种默认的queue，一种是串行的main queue(运行在主线程)，一种是并行的global queue，系统提供了获取方法。&lt;br&gt;除此之外，系统也提供了api来创建不同的dispatch queue。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://elviszp.github.io/tags/iOS/"/>
    
      <category term="GCD" scheme="https://elviszp.github.io/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>Runtime 具体使用场景</title>
    <link href="https://elviszp.github.io/2016/11/24/2016-11-24%20runtime.html"/>
    <id>https://elviszp.github.io/2016/11/24/2016-11-24 runtime.html</id>
    <published>2016-11-24T03:31:01.000Z</published>
    <updated>2016-11-26T16:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>我这里就不说原理了，目前网络上有很多对原理介绍特别深入的博客。我这里就总结下我实际开发当中应用到的实际场景。</p>
<h3 id="1-Method-Swizzling"><a href="#1-Method-Swizzling" class="headerlink" title="1. Method Swizzling"></a>1. Method Swizzling</h3><p>在实际应用中，会有需要统计实际应用路径的需求，一般都会在所有页面的viewDidAppear和viewDidDisappear事件中添加统计。<br>那么这种情况下，每个页面都去添加肯定是最低效的做法，这个时候，Runtime的功能就能发挥出来了。<br>通过+load和Method Swizzling即可实现，添加Category，添加如下代码：<br><a id="more"></a><br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UIViewController+Statistics.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">Statistics</span>)</span></div><div class="line">+ (<span class="keyword">void</span>)load</div><div class="line">&#123;</div><div class="line">    method_exchangeImplementations(class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewDidAppear:)), class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(el_viewDidAppear:)));</div><div class="line">    method_exchangeImplementations(class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewDidDisappear:)), class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(el_viewDidDisappear:)));</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)el_viewDidAppear:(<span class="built_in">BOOL</span>)animated</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> el_viewDidAppear:animated];</div><div class="line">    <span class="comment">// 在这里添加进入页面统计代码</span></div><div class="line">    <span class="comment">// 友盟example: [MobClick beginLogPageView:NSStringFromClass([self class])];</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)el_viewDidDisappear:(<span class="built_in">BOOL</span>)animated</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> el_viewDidDisappear:animated];</div><div class="line">    <span class="comment">// 在这里添加离开页面统计代码</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h3 id="Associated-Objects"><a href="#Associated-Objects" class="headerlink" title="Associated Objects"></a>Associated Objects</h3><p>关联对象，作用一般是为现有的类添加实例变量。<br>在一些优秀的第三方框架里会经常使用到他，比如MJRefresh、SDWebImageView。<br>Runtime提供的相关api是：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_setAssociatedObject</span>(<span class="params">id <span class="keyword">object</span>, <span class="keyword">const</span> <span class="keyword">void</span> *key, id <span class="keyword">value</span>, objc_AssociationPolicy policy</span>)</span>;</div><div class="line"><span class="function">id <span class="title">objc_getAssociatedObject</span>(<span class="params">id <span class="keyword">object</span>, <span class="keyword">const</span> <span class="keyword">void</span> *key</span>)</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_removeAssociatedObjects</span>(<span class="params">id <span class="keyword">object</span></span>)</span>;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIImageView</span> (<span class="title">AssociatedObjects</span>)</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *imageUrl;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">/// ----------------------</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"UIImageView+AssociatedObjects.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> imageURLKey;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImageView</span> (<span class="title">AssociatedObjects</span>)</span></div><div class="line"></div><div class="line">-(<span class="built_in">NSString</span> *)imageUrl&#123;</div><div class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;imageURLKey);</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)setImageUrl:(<span class="built_in">NSString</span> *)imageUrl&#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;imageURLKey, imageUrl, OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>可参考源代码：<a href="https://github.com/ElvisZP/Runtime-in-action" target="_blank" rel="external">Runtime in action</a></p>
<hr>
<p>未完待续</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我这里就不说原理了，目前网络上有很多对原理介绍特别深入的博客。我这里就总结下我实际开发当中应用到的实际场景。&lt;/p&gt;
&lt;h3 id=&quot;1-Method-Swizzling&quot;&gt;&lt;a href=&quot;#1-Method-Swizzling&quot; class=&quot;headerlink&quot; title=&quot;1. Method Swizzling&quot;&gt;&lt;/a&gt;1. Method Swizzling&lt;/h3&gt;&lt;p&gt;在实际应用中，会有需要统计实际应用路径的需求，一般都会在所有页面的viewDidAppear和viewDidDisappear事件中添加统计。&lt;br&gt;那么这种情况下，每个页面都去添加肯定是最低效的做法，这个时候，Runtime的功能就能发挥出来了。&lt;br&gt;通过+load和Method Swizzling即可实现，添加Category，添加如下代码：&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://elviszp.github.io/tags/iOS/"/>
    
      <category term="Runtime" scheme="https://elviszp.github.io/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Autolayout Tips</title>
    <link href="https://elviszp.github.io/2016/11/23/2016-11-24%20Autolayout%20Tips.html"/>
    <id>https://elviszp.github.io/2016/11/23/2016-11-24 Autolayout Tips.html</id>
    <published>2016-11-23T15:00:01.000Z</published>
    <updated>2016-11-26T16:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近Xib+Autolayout用的比较多，也学习到不少内容，在这里总结出来。</p>
<h3 id="Label布局"><a href="#Label布局" class="headerlink" title="Label布局"></a>Label布局</h3><p>一般情况下，只需设置其左边距、上边距约束即可。<a id="more"></a><br><img src="/images/14799173962097.jpg" alt="-w400"></p>
<p>我们知道，一般UIView布局，如果仅设置其左边距、上边距约束，那么Xcode就会报错，需要你加上宽高约束。那么为什么UILabel却不会报错呢？原因在于Label是自带内容的View，只要你设置了文本，那么它就能根据内容，自动计算出大小。同理，UIButton也是一样的。<br>另外还有一种特殊情况，就是你需要多行展示文本的时候，这种情况下你就必须设置其宽度或者其右边距，同时将Lines属性设为0，否则它们不知道在什么宽度的情况下换行。如图：<br><img src="/images/14799182141013.jpg" alt="-w400"></p>
<h3 id="⌘-快捷键"><a href="#⌘-快捷键" class="headerlink" title="⌘ + = 快捷键"></a>⌘ + = 快捷键</h3><p>Command键加=，能够自动将View设为与内容相适应的大小。<br><img src="/images/14799189164759.jpg" alt="-w300"><br>文字有部分未显示出来，此时按下快捷键，快速适应大小。<br>最方便的还是在添加UIImageView的时候，一般你拖出一张图片到xib上是这样的：<br><img src="/images/14799190296407.jpg" alt="-w300"><br>默认就是这样大小，如果此时你有一个小小的icon要加上去，那么效果是这样的：<br><img src="/images/14799191933631.jpg" alt="-w300"><br>一般情况下，你需要的是将UIImageView改为原图大小，那么现在最方便的就是按下快捷键：<br><img src="/images/14799192727895.jpg" alt="-w300"></p>
<h3 id="合并View"><a href="#合并View" class="headerlink" title="合并View"></a>合并View</h3><p>有时会有这样的情况，需要将页面中几个View合并到同一个SuperView中，简单的方式就是：</p>
<ol>
<li>选中需要的view</li>
<li>点击工具栏中的Editor -&gt; Embed in -&gt; View<br>另外ScrollView、StackView也可同样操作。</li>
</ol>
<h3 id="自定义Xib-TableViewCell"><a href="#自定义Xib-TableViewCell" class="headerlink" title="自定义Xib TableViewCell"></a>自定义Xib TableViewCell</h3><p>创建cell，勾选Also create XIB file。<br><img src="/images/14799555492340.jpg" alt=""><br>设置Identifier与文件同名。<br>然后添加Categary,添加一个类方法:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UITableViewCell+XibCell.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UITableViewCell</span> (<span class="title">XibCell</span>)</span></div><div class="line">+ (<span class="keyword">id</span>)cell:(<span class="built_in">UITableView</span> *)tableView&#123;</div><div class="line">    <span class="built_in">NSString</span> *identifier = <span class="built_in">NSStringFromClass</span>(<span class="keyword">self</span>);</div><div class="line">    <span class="built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:identifier];</div><div class="line">    <span class="keyword">if</span>(cell == <span class="literal">nil</span>)&#123;</div><div class="line">        cell = [[<span class="built_in">NSBundle</span> mainBundle]loadNibNamed:identifier owner:<span class="literal">nil</span> options:<span class="literal">nil</span>].firstObject;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>完工。<br>之后所有的自定义 xib cell都可以直接调用:</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomCell * cell = [CustomCell cell:<span class="literal">self</span>.<span class="built_in">table</span>View];</div></pre></td></tr></table></figure>
<hr>
<p>未完待续</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近Xib+Autolayout用的比较多，也学习到不少内容，在这里总结出来。&lt;/p&gt;
&lt;h3 id=&quot;Label布局&quot;&gt;&lt;a href=&quot;#Label布局&quot; class=&quot;headerlink&quot; title=&quot;Label布局&quot;&gt;&lt;/a&gt;Label布局&lt;/h3&gt;&lt;p&gt;一般情况下，只需设置其左边距、上边距约束即可。
    
    </summary>
    
    
      <category term="Autolayout" scheme="https://elviszp.github.io/tags/Autolayout/"/>
    
      <category term="iOS" scheme="https://elviszp.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>开始啦</title>
    <link href="https://elviszp.github.io/2016/11/23/2016-11-23%20start.html"/>
    <id>https://elviszp.github.io/2016/11/23/2016-11-23 start.html</id>
    <published>2016-11-23T03:56:49.000Z</published>
    <updated>2016-12-02T02:25:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从11年开始编码，至今5年。前面两三年处于摸索阶段，没什么成长。最近两年，或多或少积累了点开发经验，由于不善于表达，之前都是断断续续的记在笔记里，没有形成体系，个人成长不快。<br><a id="more"></a><br>在这个时间点上，还是打算做出一点改变，即使大部分内容网上都已有相关文章，也需要总结出来，算是强迫自己写点东西，做出改变，让自己形成知识体系。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从11年开始编码，至今5年。前面两三年处于摸索阶段，没什么成长。最近两年，或多或少积累了点开发经验，由于不善于表达，之前都是断断续续的记在笔记里，没有形成体系，个人成长不快。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
